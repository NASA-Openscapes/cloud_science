{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# read in ECCO LLC data and regrid to uniform grid for saving as netcdf and plotting\n",
    "\n",
    "- first pip install stuff & restart kernal"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#!pip install git+https://github.com/rabernat/xmitgcm.git@fix-llcreader-klevels-bug\n",
    "#!pip install ecco_v4_py"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "import libs"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import cmocean\n",
    "import xarray as xr\n",
    "import ecco_v4_py as ecco\n",
    "import xmitgcm.llcreader as llcreader\n",
    "%matplotlib inline\n",
    "import holoviews as hv\n",
    "#from holoviews.operation.datashader import regrid\n",
    "#hv.extension('bokeh')\n",
    "\n",
    "import matplotlib.pyplot as plt\n",
    "plt.rcParams['figure.figsize'] = (15,10)\n",
    "\n",
    "%matplotlib inline\n",
    "import holoviews as hv\n",
    "from holoviews.operation.datashader import regrid\n",
    "hv.extension('bokeh')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "## read in data and get Theta\n",
    "model = llcreader.ECCOPortalLLC2160Model()\n",
    "ds_sst = model.get_dataset(varnames=['Theta'], k_levels=[0], type='latlon')\n",
    "ds_sst"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## regrid data onto new uniform grid using eccopy"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "ecco_ds = ds_sst\n",
    "new_grid_delta_lat = 360/8640\n",
    "new_grid_delta_lon = 360/8640\n",
    "\n",
    "new_grid_min_lat = -90+new_grid_delta_lat/2\n",
    "new_grid_max_lat = 90-new_grid_delta_lat/2\n",
    "\n",
    "new_grid_min_lon = -180+new_grid_delta_lon/2\n",
    "new_grid_max_lon = 180-new_grid_delta_lon/2\n",
    "\n",
    "new_grid_lon, new_grid_lat, field_nearest_1deg =\\\n",
    "        ecco.resample_to_latlon(ecco_ds.XC, \\\n",
    "                                ecco_ds.YC, \\\n",
    "                                ecco_ds.Theta.isel(time=6200),\\\n",
    "                                new_grid_min_lat, new_grid_max_lat, new_grid_delta_lat,\\\n",
    "                                new_grid_min_lon, new_grid_max_lon, new_grid_delta_lon,\\\n",
    "                                fill_value = np.NaN, \\\n",
    "                                mapping_method = 'nearest_neighbor',\n",
    "                                radius_of_influence = 120000)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## switch from -180-180 to 0-360 to look at pacific ocean"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "da = xr.DataArray(field_nearest_1deg,name='Theta',coords={'lat':new_grid_lat[:,0],'lon':new_grid_lon[0,:]},dims=('lat','lon'))\n",
    "da.to_netcdf('./data/ecco2011_11_19_latlon360Theta.nc')\n",
    "da.coords['lon'] = np.mod(da['lon'], 360)\n",
    "da = da.sortby(da.lon)\n",
    "# output data\n",
    "da.to_netcdf('./data/ecco2011_11_19_latlonTheta.nc')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## start from here if just plotting existing data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "da = xr.open_dataset('./data/ecco2011_11_19_latlon.nc')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import cartopy\n",
    "import cartopy.crs as ccrs\n",
    "ortho = ccrs.Orthographic(-170, 20)           # define target coordinate frame\n",
    "geo = ccrs.PlateCarree()                     # define origin coordinate frame\n",
    "\n",
    "plt.figure(figsize=(18,14))                    #set the figure size\n",
    "ax = plt.subplot(1, 1, 1, projection=ortho)  #create the axis for plotting\n",
    "\n",
    "q = da.Theta.plot(ax=ax, \n",
    "                            transform = geo, \n",
    "                            cmap='turbo', \n",
    "                            vmin=5, \n",
    "                            vmax=29) # plot a colormap in transformed coordinates cmap='OrRd', \n",
    "\n",
    "ax.add_feature(cartopy.feature.COASTLINE)\n",
    "plt.savefig('./../figures/theta_global2_ortho_turbo.png')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import cartopy\n",
    "import cartopy.crs as ccrs\n",
    "ortho = ccrs.Orthographic(-170, 20)           # define target coordinate frame\n",
    "geo = ccrs.PlateCarree()                     # define origin coordinate frame\n",
    "\n",
    "plt.figure(figsize=(18,14))                    #set the figure size\n",
    "ax = plt.subplot(1, 1, 1, projection=ortho)  #create the axis for plotting\n",
    "\n",
    "q = da.Theta.plot(ax=ax, \n",
    "                            transform = geo, \n",
    "                            cmap=cmocean.cm.thermal, \n",
    "                            vmin=5, \n",
    "                            vmax=29) # plot a colormap in transformed coordinates cmap='OrRd', \n",
    "\n",
    "ax.add_feature(cartopy.feature.COASTLINE)\n",
    "plt.savefig('./../figures/theta_global2_ortho_thermal.png')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## you can also just plot data even if not on a regular grid"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "plt.rcParams['figure.figsize'] = (20,10)\n",
    "ds_sst.Theta.isel(k=0,time=6200,j=slice(2500,6480),i=slice(3000,8000)).plot(vmin=5,vmax=29,cmap='turbo')\n",
    "plt.savefig('./../figures/theta_global.png')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "plt.rcParams['figure.figsize'] = (20,10)\n",
    "ds_sst.Theta.isel(k=0,time=6200,j=slice(2500,6480),i=slice(3000,8000)).plot(vmin=5,vmax=28,cmap='turbo')\n",
    "plt.savefig('./../figures/theta_global2.png')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "plt.rcParams['figure.figsize'] = (20,10)\n",
    "ds_sst.Theta.isel(k=0,time=6200,j=slice(2500,6480),i=slice(3000,8000)).plot(vmin=5,vmax=28,cmap='coolwarm')\n",
    "plt.savefig('./../figures/theta_global2_coolwarm.png')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "plt.rcParams['figure.figsize'] = (20,10)\n",
    "ds_sst.Theta.isel(k=0,time=6200,j=slice(2500,6480),i=slice(3000,8000)).plot(vmin=5,vmax=28,cmap=cmocean.cm.thermal)\n",
    "plt.savefig('././figures/theta_global2_thermal.png')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### EXPLORE DATA"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "ds_all = model.get_dataset(k_levels=[0], type='latlon')\n",
    "ds_all"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "plt.rcParams['figure.figsize'] = (20,10)\n",
    "ds_all.oceQnet.isel(time=6200,j=slice(2500,6480),i=slice(3000,8000)).plot(vmin=-200,vmax=400,cmap=cmocean.cm.thermal)\n",
    "plt.savefig('./../figures/theta_global2_heatflux_thermal2.png')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#testing for when to look\n",
    "dataset = hv.Dataset(ds_sst.Theta.isel(k=0,j=slice(3500,6100),i=slice(3000,8000),time=slice(1,18000,240)).astype('f4'))\n",
    "hv_im = (dataset.to(hv.Image, ['i', 'j'], dynamic=True)\n",
    "                .options(cmap='Magma', width=950, height=600, colorbar=True))\n",
    "\n",
    "%output holomap='scrubber' fps=3\n",
    "regrid(hv_im, precompute=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# make more data netcdf files\n",
    "## read in data and get Theta\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "model = llcreader.ECCOPortalLLC2160Model()\n",
    "ds_sst = model.get_dataset(varnames=['oceQnet'], k_levels=[0], type='latlon')\n",
    "\n",
    "ecco_ds = ds_sst\n",
    "new_grid_delta_lat = 360/8640\n",
    "new_grid_delta_lon = 360/8640\n",
    "\n",
    "new_grid_min_lat = -90+new_grid_delta_lat/2\n",
    "new_grid_max_lat = 90-new_grid_delta_lat/2\n",
    "\n",
    "new_grid_min_lon = -180+new_grid_delta_lon/2\n",
    "new_grid_max_lon = 180-new_grid_delta_lon/2\n",
    "\n",
    "new_grid_lon, new_grid_lat, field_nearest_1deg =\\\n",
    "        ecco.resample_to_latlon(ecco_ds.XC, \\\n",
    "                                ecco_ds.YC, \\\n",
    "                                ecco_ds.oceQnet.isel(time=6200),\\\n",
    "                                new_grid_min_lat, new_grid_max_lat, new_grid_delta_lat,\\\n",
    "                                new_grid_min_lon, new_grid_max_lon, new_grid_delta_lon,\\\n",
    "                                fill_value = np.NaN, \\\n",
    "                                mapping_method = 'nearest_neighbor',\n",
    "                                radius_of_influence = 120000)\n",
    "\n",
    "da = xr.DataArray(field_nearest_1deg,name='oceQnet',coords={'lat':new_grid_lat[:,0],'lon':new_grid_lon[0,:]},dims=('lat','lon'))\n",
    "# output data\n",
    "da.to_netcdf('./data/ecco2011_11_19_latlon360oceQnet.nc')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "da"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
